// <auto-generated />
using System;
using CabUserService.Infrastructures.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CabUserService.Migrations
{
    [DbContext(typeof(PostgresDbContext))]
    [Migration("20231010085302_SeedDataCategory")]
    partial class SeedDataCategory
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CabUserService.Models.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Avatar")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0b4fa388-c5aa-4007-9513-39cd74ae7af8"),
                            Avatar = "the-thao.jpg",
                            CreatedAt = new DateTime(2023, 10, 10, 8, 53, 2, 301, DateTimeKind.Utc).AddTicks(4632),
                            Name = "Thể thao",
                            UpdatedAt = new DateTime(2023, 10, 10, 8, 53, 2, 301, DateTimeKind.Utc).AddTicks(4633)
                        },
                        new
                        {
                            Id = new Guid("5b1842d3-eff4-4698-be8a-2af194b6e09d"),
                            Avatar = "giai-tri-tong-hop.jpg",
                            CreatedAt = new DateTime(2023, 10, 10, 8, 53, 2, 301, DateTimeKind.Utc).AddTicks(4636),
                            Name = "Giải trí tổng hợp",
                            UpdatedAt = new DateTime(2023, 10, 10, 8, 53, 2, 301, DateTimeKind.Utc).AddTicks(4636)
                        },
                        new
                        {
                            Id = new Guid("944f9217-a76c-4763-9e9a-5d29ba9d4625"),
                            Avatar = "cong-nghe.jpg",
                            CreatedAt = new DateTime(2023, 10, 10, 8, 53, 2, 301, DateTimeKind.Utc).AddTicks(4638),
                            Name = "Công nghệ",
                            UpdatedAt = new DateTime(2023, 10, 10, 8, 53, 2, 301, DateTimeKind.Utc).AddTicks(4638)
                        },
                        new
                        {
                            Id = new Guid("a9e7a303-4fcf-4ecf-8a1f-b498b737f45c"),
                            Avatar = "thu-cung.jpg",
                            CreatedAt = new DateTime(2023, 10, 10, 8, 53, 2, 301, DateTimeKind.Utc).AddTicks(4640),
                            Name = "Thú cưng",
                            UpdatedAt = new DateTime(2023, 10, 10, 8, 53, 2, 301, DateTimeKind.Utc).AddTicks(4640)
                        },
                        new
                        {
                            Id = new Guid("144fe031-e466-4929-925e-9bd80b48050c"),
                            Avatar = "game.jpg",
                            CreatedAt = new DateTime(2023, 10, 10, 8, 53, 2, 301, DateTimeKind.Utc).AddTicks(4641),
                            Name = "Game",
                            UpdatedAt = new DateTime(2023, 10, 10, 8, 53, 2, 301, DateTimeKind.Utc).AddTicks(4642)
                        },
                        new
                        {
                            Id = new Guid("3d6b2b4e-86c7-43ea-8838-7a5fd79acaf4"),
                            Avatar = "phim.jpg",
                            CreatedAt = new DateTime(2023, 10, 10, 8, 53, 2, 301, DateTimeKind.Utc).AddTicks(4655),
                            Name = "Phim",
                            UpdatedAt = new DateTime(2023, 10, 10, 8, 53, 2, 301, DateTimeKind.Utc).AddTicks(4656)
                        },
                        new
                        {
                            Id = new Guid("cd63724c-e5a3-48a2-a023-aefbacc6d694"),
                            Avatar = "sang-tao.jpg",
                            CreatedAt = new DateTime(2023, 10, 10, 8, 53, 2, 301, DateTimeKind.Utc).AddTicks(4657),
                            Name = "Sáng tạo",
                            UpdatedAt = new DateTime(2023, 10, 10, 8, 53, 2, 301, DateTimeKind.Utc).AddTicks(4657)
                        },
                        new
                        {
                            Id = new Guid("aabbabbd-5217-40c7-8364-010695e1b643"),
                            Avatar = "chu-de-nguoi-di-lam.jpg",
                            CreatedAt = new DateTime(2023, 10, 10, 8, 53, 2, 301, DateTimeKind.Utc).AddTicks(4659),
                            Name = "Chủ đề người đi làm ",
                            UpdatedAt = new DateTime(2023, 10, 10, 8, 53, 2, 301, DateTimeKind.Utc).AddTicks(4659)
                        },
                        new
                        {
                            Id = new Guid("b399da13-47e0-474b-8957-919b2a9ad25e"),
                            Avatar = "chu-de-nguoi-o-nha.jpg",
                            CreatedAt = new DateTime(2023, 10, 10, 8, 53, 2, 301, DateTimeKind.Utc).AddTicks(4661),
                            Name = "Chủ đề ở nhà",
                            UpdatedAt = new DateTime(2023, 10, 10, 8, 53, 2, 301, DateTimeKind.Utc).AddTicks(4661)
                        },
                        new
                        {
                            Id = new Guid("60d05c18-c3bd-41a8-97af-c7c20912097e"),
                            Avatar = "nswl.PNG",
                            CreatedAt = new DateTime(2023, 10, 10, 8, 53, 2, 301, DateTimeKind.Utc).AddTicks(4662),
                            Name = "NSFW ",
                            UpdatedAt = new DateTime(2023, 10, 10, 8, 53, 2, 301, DateTimeKind.Utc).AddTicks(4663)
                        },
                        new
                        {
                            Id = new Guid("a9df8aec-4892-4d2c-a18c-1c3373df6f78"),
                            Avatar = "real-life.jpg",
                            CreatedAt = new DateTime(2023, 10, 10, 8, 53, 2, 301, DateTimeKind.Utc).AddTicks(4664),
                            Name = "Real life",
                            UpdatedAt = new DateTime(2023, 10, 10, 8, 53, 2, 301, DateTimeKind.Utc).AddTicks(4664)
                        },
                        new
                        {
                            Id = new Guid("fd69f597-3355-4213-9c3e-379ac859fa9c"),
                            Avatar = "anime-wibu.jpg",
                            CreatedAt = new DateTime(2023, 10, 10, 8, 53, 2, 301, DateTimeKind.Utc).AddTicks(4666),
                            Name = "Anime - wibu",
                            UpdatedAt = new DateTime(2023, 10, 10, 8, 53, 2, 301, DateTimeKind.Utc).AddTicks(4666)
                        },
                        new
                        {
                            Id = new Guid("f27e895e-29b8-48ed-a35c-9ef982ed9539"),
                            Avatar = "food.jpg",
                            CreatedAt = new DateTime(2023, 10, 10, 8, 53, 2, 301, DateTimeKind.Utc).AddTicks(4668),
                            Name = "Food",
                            UpdatedAt = new DateTime(2023, 10, 10, 8, 53, 2, 301, DateTimeKind.Utc).AddTicks(4668)
                        });
                });

            modelBuilder.Entity("CabUserService.Models.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<long>("Coin")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("Credit")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<bool>("IsSoftDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("SequenceId")
                        .HasColumnType("integer");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CabUserService.Models.Entities.UserBalanceLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("UserBalanceLogs");
                });

            modelBuilder.Entity("CabUserService.Models.Entities.UserCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("UserCategories");
                });

            modelBuilder.Entity("CabUserService.Models.Entities.UserDetail", b =>
                {
                    b.Property<Guid>("UserDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Avatar")
                        .HasColumnType("text");

                    b.Property<decimal>("Balance")
                        .HasColumnType("numeric");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Dob")
                        .HasColumnType("text");

                    b.Property<string>("Follower")
                        .HasColumnType("text");

                    b.Property<string>("Following")
                        .HasColumnType("text");

                    b.Property<string>("IdentityCardNumber")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("Sex")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("UserDetailId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserDetails");
                });

            modelBuilder.Entity("CabUserService.Models.Entities.UserTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("DonationMessage")
                        .HasColumnType("text");

                    b.Property<Guid?>("FromUserId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("ToUserId")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("UserTransactionLogs");
                });

            modelBuilder.Entity("CabUserService.Models.Entities.UserDetail", b =>
                {
                    b.HasOne("CabUserService.Models.Entities.User", "User")
                        .WithOne("UserDetail")
                        .HasForeignKey("CabUserService.Models.Entities.UserDetail", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CabUserService.Models.Entities.User", b =>
                {
                    b.Navigation("UserDetail");
                });
#pragma warning restore 612, 618
        }
    }
}
