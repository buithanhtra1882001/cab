// <auto-generated />
using System;
using CabGroupService.Infrastructures.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CabGroupService.Migrations
{
    [DbContext(typeof(GroupDbContext))]
    [Migration("20240804090435_create_table_group_member")]
    partial class create_table_group_member
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CabGroupService.Models.Entities.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("ApprovalRequired")
                        .HasColumnType("boolean");

                    b.Property<string>("ContactEmail")
                        .HasColumnType("text");

                    b.Property<string>("CoverPhoto")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedByUser")
                        .HasColumnType("uuid");

                    b.Property<string>("GroupDescription")
                        .IsUnicode(true)
                        .HasColumnType("text");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("GroupTagline")
                        .HasColumnType("text");

                    b.Property<int>("GroupType")
                        .HasColumnType("integer");

                    b.Property<int>("JoinRequestCount")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("LastActivityDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Location")
                        .HasColumnType("text");

                    b.Property<int>("MemberCount")
                        .HasColumnType("integer");

                    b.Property<string>("PrivacySettings")
                        .HasColumnType("text");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("text");

                    b.Property<string>("Rules")
                        .HasColumnType("text");

                    b.Property<string>("TagList")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("WebsiteURL")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Group");
                });

            modelBuilder.Entity("CabGroupService.Models.Entities.GroupMembers", b =>
                {
                    b.Property<Guid>("GroupID")
                        .HasColumnType("uuid")
                        .HasColumnOrder(0);

                    b.Property<Guid>("UserID")
                        .HasColumnType("uuid")
                        .HasColumnOrder(1);

                    b.Property<decimal>("ContributionScore")
                        .HasColumnType("numeric");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("InvitedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("JoinMethod")
                        .HasColumnType("integer");

                    b.Property<string>("JoinReason")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastActiveDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<bool>("NotificationSettings")
                        .HasColumnType("boolean");

                    b.Property<int>("ReputationPoints")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("WarningsCount")
                        .HasColumnType("integer");

                    b.HasKey("GroupID", "UserID");

                    b.HasIndex("GroupID", "UserID")
                        .IsUnique();

                    b.ToTable("GroupMembers");
                });

            modelBuilder.Entity("CabGroupService.Models.Entities.GroupMembers", b =>
                {
                    b.HasOne("CabGroupService.Models.Entities.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });
#pragma warning restore 612, 618
        }
    }
}
